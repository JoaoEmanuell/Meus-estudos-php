Todo comando PHP deve estar entre as tags

<?php
	bloco;
?>

Todo comando deve ser fechado com ; no final dele

============================================

echo "texto" = escreve na tela o texto desejado

Dentro dos comandos do PHP pode-se usar tags html

echo "<h2>texto</h2>"

============================================

phpinfo() = exibe informações sobre o PHP atual

============================================
//Aula 04

$var = dado; declara uma variavel

echo "$var texto"; concatena um texto
============================================
//Aula 05

Colocando letras e numeros na url:

http://localhost/Aula_05.php?a=5&b=3

E separando usando &

Podemos fazer o PHP retirar elementos dessa URL, usando o comando:

$var = $_GET["a"];

Dessa forma é possivel ter elementos personalizados usando a url.

abs(v) = Valor absoluto

pow(v1, v2) = Potenciação

sqrt(v) = Raiz quadrada

round(v) = Arredondamento
	ceil(v) = Arredonda de maneira positiva
	floor(v) = Arredonda de maneira negativa

intval(v) = Valor inteiro da variavel

number_format(v, d, 'dec_point', 'thousands_sep') = Formatação
	v = variavel
	d = numero de casas decimais
	dec_point = sinal de separação decimal (por padrão é ponto)
	thousands_sep = sinal de separação milar (por padrão é virgula)
============================================
//Aula 06

Pré-incremento:

	$a = $a + 1
	
	++$a

Pós-incremento:

	$a = $a + 1

	$a++

Pré-decremento:

	$a = $a - 1

	--$a

Pós-decremento:

	$a = $a - 1

	$a--
	
Comentários inline:

	//Comentário

	#Comentário

Comentários multiline:

	/*Tudo o que estiver aqui é comentário*/

Variáveis referenciadas:

Variáveis referenciadas são variáves que recebem o valor
de outra variável, porém se a variável for mudada a outra 
tmb será, existe uma ligação entre as variáveis.

$var = 3;

$varb = &$var;

Variáveis de variáveis:

Variáveis de variáveis são variáveis que o nome delas sera
o valor de outra variável:

$var = "oi";

$$var = "eae";

echo "$var";

echo "$oi";

Dessa forma temos uma variavel que o nome dela é o valor
da outra variável.
============================================
//Aula 07

Operadores Relacionais:

Maior >

Menor <

Maior ou igual >=

Menor ou igual <=

Diferente <> ou !=

Igual ==

Idêntico === //Testa se o conteudo da var é igual ao da
outra var

Operador Unário:

expressão ? verdadeiro : falso;

Mesma coisa do operador ternario

Operadores Lógicos:

and && :
	
	Se os dois valores forem veradeiros ele retorna
	verdadeiro senão retorna falso

or || :

	Se um valor for verdadeiro ele retorna verdadeiro
	senão ele retorna falso

xor:

	Se um valor for falso ele retorna verdadeiro, mas
	se dois valores forem falsos ele retorna falso,
	senão ele retorna falso

!:

	Se um valor é verdadeiro ele retorna falso

	Se um valor é falso ele retorna verdadeiro
	
date("Y") = Pega o ano atual
============================================
//Aula 08

$var = $_GET['input_name']; = a var recebe o elemento indicado na url
$var = $_POST['input_name']; = a var recebe o elemento indicado por pacotes

Lembresse que para usar ambos depedende do metodo da tag form do html, se a form for com get use o o $_GET, se não use o $_POST.

Para envitar bugs você pode usar: 

$var = isset($_GET['input_name'] ? $_GET['input_name'] : value_erro;

ou

$var = isset($_POST['input_name'] ? $_POST['input_name'] : value_erro;

o metodo isset serve para verificar se há um erro no valor passado, caso exista ele ira impedir bugs

============================================
//Aula 09

Condição simples:

	if (condição){
		bloco;
	}

Condição composta:

	if (condição){
		bloco;
	}
	else{
		bloco;
	}
	
Or

	if (condição){
		bloco;
	}
	elseif (condição){
		bloco;
	}
	else{
		bloco;
	}
	
============================================
//Aula 10

Switch simples:

switch ($var) {

	case value:
		bloco;
		break;
	
	default:
		bloco;
		break;
	
Essa condição switch serve principalmente para valores exatos, lembresse de colocar os breaks; para evitar bugs

Switch multiplos casos:

switch ($var) {

	case value:
	case value:
	case value:
		bloco;
		break;
	
	default:
		bloco;
		break;
}

Essa condiçaõ serve para valores que sejam em sequencia, por exemplo: 1, 2, 3, caso o valor seja igual a um desses o bloco sera executado.
============================================
//Aula 11

while (condição) {
	bloco;
}

Primeiro teste depois realize o bloco
============================================
//Aula 12

do {
	bloco;
} while (condição)

primeiro realize o bloco e depois teste.
============================================
//Aula 13

for ($var_inicial = valor; condição; incremento) {
	bloco
}

Declare a $var inicial, verifique se a condição é verdadeira, se ela for falsa execute o bloco, incremente.
============================================
//Aula 14

function name(paramentros){
	bloco;
}

Dessa forma ele ira criar a função que você deseja.

Caso que queria que ela retorne algo você utilize o return $var

Funções com multiplos paramentros:

function name(){
	
	$p = func_get_args();
	tot = func_num_args();

}

$p = ira pegar todos os valores colocados nos paramentros entre ()

$tot = ira pegar o numero total de casas (separações de elementos) entre ()
============================================
//Aula 15

function teste(&$var){
	
	$var = $var + 2;
	echo $var;

}

Essa forma serve para que ele faça uma referencia entre o valor a $var que passa o valor e a $var do paramentro.

Para utilizar funções externas:

1° = Crie um arquivo .php com a função

2° = Use o comando:

	include "arquivo.php";

Dessa forma a sua função estará em um arquivo externo e podera ser usada por
qualquer arquivo que você deseje.

Também existe o comando require, caso você chame o arquivo mas ele não esteja
disponivel no momento o script.php ira parar de ser executado ali mesmo.

Diferente do que acontece com o include, que irá continuar o codigo normalmente
mesmo se o arquivo estiver indisponivel.

Existe também o include_once
e o require_once

Basicamente os dois verificam se você já carregou o arquivo, caso ja tenha carregado
uma vez ele não ira carregar, senão ele ira carregar.
============================================
//Aula 16

printf = Exibe um numero já formatado

	printf tem divesas parâmentros:
	
	%s = Nome da string
	%.cf = Numero de casas decimais, c = casas
	%d = Valor decimal (positivo ou negativo)
	%u = Valor decimal sem sinal (apenas positivos)


print_r = Exibe o vetor e os valores dele com as casas.

wordwrap = Quebra de linha:

	wordwrap(txt, lc ,"<br>\n", bool)
	
strlen = Calcula o tamanho de caracteres de uma str:

trim = Elimina espaços colocados no inicio e no fim da str:

ltrim = Elimina os espaços colocados no inicio da str:

rtrim = Elimina os espaços colocados no final da str:

str_word_count = Retorna o numero de palavras da str:

explode = Transforma a str em um vetor:

str_split = Transforma cada letra da str em uma chave de vetor:

implode = Transforma os dados de um vetor em um texto:

chr = Mostra a letra que está no codigo indicado:

ord = Mostra o codigo que está na letra indicada:
============================================
//Aula 17

strtolower = Transforma todas as letras da str em minusculas:

strtoupper = Transforma todas as letras da str em maisculas:

ucfirst = Transforma a primeira letra em uma letra maiscula:

ucwords = Transforma a primeira letra de cada palavra em uma letra maiscula:

strrev = Inverte a ordem das letras na str:

strpos = informa a localização da primeira letra da palavra desejada:

	strpos(txt, "pal"):
	
stripos = informa a localização da primeira letra da palavra desejada:

	stripos(txt, "pal"):

substr_count = informa quantas vezes a palavra foi encontrada:

	substr_count(txt, "pal"):
	
substr = informa quais os caracteres dentro do invervalo indicado:

	substr(txt, i, f):
	
str_pad = Complementa todos os valores com str indicadas:

	str_pad(txt, v, "c", P);
	
str_repeat = Repete uma str determinado numero de vezes.

	str_repeat(txt, v):
	
str_replace = Substitui todas a palavra desejada por outra palavra:

	str_replace("pf", "pr", txt)
	
str_ireplace = Substitui todas a palavra desejada por outra palavra:

        str_replace("pf", "pr", txt)
============================================
//Aula 18

$var = array();

or

$var = [];

Cria um array

$var = range(vi, vf, p)

	vi = valor inicial

	vf = valor final

	p = passo

	ele irá criar um array que o ultimo valor seja vf, o primeiro seja vi
	e va preenchendo as outras chaves baseado no p
	
	No caso as chaves entre vi e vf vão recebendo a soma de p, até que
	chegue a vf, aumentando exponecialmente o numero de chaves
	
foreach:

		foreach($var as $valor){

			echo "$valor ";
		}

Cria uma chave personalizada:
	$var = array(c => "Value",)

Apagar valores:

	unset($var[c]); = apaga o item desejado
	
	array_pop($var); = apaga o ultimo item da array
	
Matrizes:

	Para criar uma matriz, você utiliza o conceito de array aninhados:

	$var = array(array(value), array(value))

	dessa forma você tera um array com 2 arrays dentro deles

	O numero de arrays dentro de um array, determina o numero de colunas

	O numero de linhas é determinado pelo numero de valores dentro das 
	colunas

	Para adicionar elementos você utiliza:

	$var[c][l] = value;

	c = coluna

	l = linha
============================================
//Aula 19

Funções para vetores:

	print_r($v) = exibe o vetor e as posições

	var_dump($v) = exibe o vetor, as posições, os tipos primitivos e o total
	
	count($v) = exibe o numero de keys do vetor

	array_push($v, value) = adiciona um elemento no final do vetor 
	(tanto faz usar $v[] = value; ou esse)

	array_pop($v) = elimina o ultimo elemento do vetor

	array_unshift($v, value) = adiciona um elemento no inicio do vetor

	array_shift($v) = elimina o primeiro elemento do vetor

	sort($v) = coloca o vetor em ordem (caso o tipo primitivo de um elemento
	seja str, a str ira ser colocada em primeiro e ordenar por ordem
	alfabetica)

	rsort($v) = coloca o vetor em ordem reversa

	obs: sort e rsort não alteram as keys, so os valores

	asort($v) = coloca o vator em ordem cresente alterando as keys

	arsort($v) = coloca o vetor em ordem decresente alterando as keys

	ksort($v) = coloca o vetor em ordem baseado nas keys, consequentemente
	altera os valores das keys

	krsort($v) = coloca o vetor em ordem reversa baseado nas keys
	consequentemente altera os valores das keys
============================================
